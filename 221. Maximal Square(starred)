class Solution {
public:
    int helper(vector<vector<char>>& mat, int i, int j, int& maxi,vector<vector<int>>& dp) {
        // Base case
        if (i >= mat.size() || j >= mat[0].size()) return 0;

        if(dp[i][j]!=-1) return dp[i][j];


        int right = helper(mat, i, j + 1, maxi,dp);
        int diagonal = helper(mat, i + 1, j + 1, maxi,dp);
        int down = helper(mat, i + 1, j, maxi,dp);

        if (mat[i][j] == '1') {
            dp[i][j] = 1 + min(right, min(diagonal, down));
            maxi = max(maxi, dp[i][j]); 
            return dp[i][j];
        }
        return dp[i][j]=0;
    }

    int maximalSquare(vector<vector<char>>& matrix) {
        int maxi = 0;
        int m = matrix.size();
        int n = matrix[0].size();
        vector<vector<int>>dp(m,vector<int>(n,-1));
        helper(matrix, 0, 0, maxi,dp); 
        return maxi * maxi; 
    }
};
