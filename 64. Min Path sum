class Solution {
public:

    int f(vector<vector<int>>& grid, int i, int j,vector<vector<int>>& dp){
        int n = grid.size();
        int m = grid[0].size();

        if(i>=n || j>=m) return INT_MAX;
        if(dp[i][j]!=-1) return dp[i][j];
        if(i==n-1 && j==m-1) return grid[i][j];

        int right = f(grid,i,j+1,dp);
        int left = f(grid,i+1,j,dp);

        return dp[i][j]=grid[i][j] + min(right,left);
    }
    int minPathSum(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> dp(n + 1, vector<int>(m + 1, -1));
        return f(grid,0,0,dp);
    }
};
